import{e,o as n,G as o,f as l,b as u}from"./index-BGeJOtze.js";class a extends e{constructor(){super(n(a.getDefaults(),arguments,["channels"])),this.name="Split";const t=n(a.getDefaults(),arguments,["channels"]);this._splitter=this.input=this.output=this.context.createChannelSplitter(t.channels),this._internalChannels=[this._splitter]}static getDefaults(){return Object.assign(e.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._splitter.disconnect(),this}}class r extends e{constructor(){super(n(r.getDefaults(),arguments,["type","size"])),this.name="Analyser",this._analysers=[],this._buffers=[];const t=n(r.getDefaults(),arguments,["type","size"]);this.input=this.output=this._gain=new o({context:this.context}),this._split=new a({context:this.context,channels:t.channels}),this.input.connect(this._split),l(t.channels,1);for(let s=0;s<t.channels;s++)this._analysers[s]=this.context.createAnalyser(),this._split.connect(this._analysers[s],s,0);this.size=t.size,this.type=t.type}static getDefaults(){return Object.assign(e.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return this._analysers.forEach((t,s)=>{const i=this._buffers[s];this._type==="fft"?t.getFloatFrequencyData(i):this._type==="waveform"&&t.getFloatTimeDomainData(i)}),this.channels===1?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(t){this._analysers.forEach((s,i)=>{s.fftSize=t*2,this._buffers[i]=new Float32Array(t)})}get channels(){return this._analysers.length}get type(){return this._type}set type(t){u(t==="waveform"||t==="fft",`Analyser: invalid type: ${t}`),this._type=t}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(t){this._analysers.forEach(s=>s.smoothingTimeConstant=t)}dispose(){return super.dispose(),this._analysers.forEach(t=>t.disconnect()),this._split.dispose(),this._gain.dispose(),this}}class h extends e{constructor(){super(n(h.getDefaults(),arguments)),this.name="MeterBase",this.input=this.output=this._analyser=new r({context:this.context,size:256,type:"waveform"})}dispose(){return super.dispose(),this._analyser.dispose(),this}}export{r as A,h as M};
