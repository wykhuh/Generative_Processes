import{F as E,z as h,B as k,C as f,o as n,S as d,i as y,M as O,G as M,r as R,E as c,e as m,H as x,a as b,I as A,A as S,J as V,b as r,u as q,w,K as T,L as j,N as z}from"./index-BGeJOtze.js";import{M as N}from"./MeterBase-XOrtjUOA.js";class l extends E{constructor(){super(...arguments),this.name="MidiClass",this.defaultUnits="midi"}_frequencyToUnits(e){return h(super._frequencyToUnits(e))}_ticksToUnits(e){return h(super._ticksToUnits(e))}_beatsToUnits(e){return h(super._beatsToUnits(e))}_secondsToUnits(e){return h(super._secondsToUnits(e))}toMidi(){return this.valueOf()}toFrequency(){return k(this.toMidi())}transpose(e){return new l(this.context,this.toMidi()+e)}}class u extends f{constructor(){super(n(u.getDefaults(),arguments)),this.name="ModulationSynth";const e=n(u.getDefaults(),arguments);this._carrier=new d({context:this.context,oscillator:e.oscillator,envelope:e.envelope,onsilence:()=>this.onsilence(this),volume:-10}),this._modulator=new d({context:this.context,oscillator:e.modulation,envelope:e.modulationEnvelope,volume:-10}),this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope,this.modulation=this._modulator.oscillator,this.modulationEnvelope=this._modulator.envelope,this.frequency=new y({context:this.context,units:"frequency"}),this.detune=new y({context:this.context,value:e.detune,units:"cents"}),this.harmonicity=new O({context:this.context,value:e.harmonicity,minValue:0}),this._modulationNode=new M({context:this.context,gain:0}),R(this,["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])}static getDefaults(){return Object.assign(f.getDefaults(),{harmonicity:3,oscillator:Object.assign(c(A.getDefaults(),[...Object.keys(b.getDefaults()),"frequency","detune"]),{type:"sine"}),envelope:Object.assign(c(x.getDefaults(),Object.keys(m.getDefaults())),{attack:.01,decay:.01,sustain:1,release:.5}),modulation:Object.assign(c(A.getDefaults(),[...Object.keys(b.getDefaults()),"frequency","detune"]),{type:"square"}),modulationEnvelope:Object.assign(c(x.getDefaults(),Object.keys(m.getDefaults())),{attack:.5,decay:0,sustain:1,release:.5})})}_triggerEnvelopeAttack(e,t){this._carrier._triggerEnvelopeAttack(e,t),this._modulator._triggerEnvelopeAttack(e,t)}_triggerEnvelopeRelease(e){return this._carrier._triggerEnvelopeRelease(e),this._modulator._triggerEnvelopeRelease(e),this}getLevelAtTime(e){return e=this.toSeconds(e),this.envelope.getValueAtTime(e)}dispose(){return super.dispose(),this._carrier.dispose(),this._modulator.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._modulationNode.dispose(),this}}class D extends u{constructor(){super(n(D.getDefaults(),arguments)),this.name="AMSynth",this._modulationScale=new S({context:this.context}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output)}dispose(){return super.dispose(),this._modulationScale.dispose(),this}}class p extends V{constructor(){super(n(p.getDefaults(),arguments,["voice","options"])),this.name="PolySynth",this._availableVoices=[],this._activeVoices=[],this._voices=[],this._gcTimeout=-1,this._averageActiveVoices=0;const e=n(p.getDefaults(),arguments,["voice","options"]);r(!q(e.voice),"DEPRECATED: The polyphony count is no longer the first argument.");const t=e.voice.getDefaults();this.options=Object.assign(t,e.options),this.voice=e.voice,this.maxPolyphony=e.maxPolyphony,this._dummyVoice=this._getNextAvailableVoice();const s=this._voices.indexOf(this._dummyVoice);this._voices.splice(s,1),this._gcTimeout=this.context.setInterval(this._collectGarbage.bind(this),1)}static getDefaults(){return Object.assign(V.getDefaults(),{maxPolyphony:32,options:{},voice:d})}get activeVoices(){return this._activeVoices.length}_makeVoiceAvailable(e){this._availableVoices.push(e);const t=this._activeVoices.findIndex(s=>s.voice===e);this._activeVoices.splice(t,1)}_getNextAvailableVoice(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){const e=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return e.connect(this.output),this._voices.push(e),e}else w("Max polyphony exceeded. Note dropped.")}_collectGarbage(){if(this._averageActiveVoices=Math.max(this._averageActiveVoices*.95,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){const e=this._availableVoices.shift(),t=this._voices.indexOf(e);this._voices.splice(t,1),this.context.isOffline||e.dispose()}}_triggerAttack(e,t,s){e.forEach(o=>{const a=new l(this.context,o).toMidi(),i=this._getNextAvailableVoice();i&&(i.triggerAttack(o,t,s),this._activeVoices.push({midi:a,voice:i,released:!1}),this.log("triggerAttack",o,t))})}_triggerRelease(e,t){e.forEach(s=>{const o=new l(this.context,s).toMidi(),a=this._activeVoices.find(({midi:i,released:g})=>i===o&&!g);a&&(a.voice.triggerRelease(t),a.released=!0,this.log("triggerRelease",s,t))})}_scheduleEvent(e,t,s,o){r(!this.disposed,"Synth was already disposed"),s<=this.now()?e==="attack"?this._triggerAttack(t,s,o):this._triggerRelease(t,s):this.context.setTimeout(()=>{this._scheduleEvent(e,t,s,o)},s-this.now())}triggerAttack(e,t,s){Array.isArray(e)||(e=[e]);const o=this.toSeconds(t);return this._scheduleEvent("attack",e,o,s),this}triggerRelease(e,t){Array.isArray(e)||(e=[e]);const s=this.toSeconds(t);return this._scheduleEvent("release",e,s),this}triggerAttackRelease(e,t,s,o){const a=this.toSeconds(s);if(this.triggerAttack(e,a,o),T(t)){r(T(e),"If the duration is an array, the notes must also be an array"),e=e;for(let i=0;i<e.length;i++){const g=t[Math.min(i,t.length-1)],v=this.toSeconds(g);r(v>0,"The duration must be greater than 0"),this.triggerRelease(e[i],a+v)}}else{const i=this.toSeconds(t);r(i>0,"The duration must be greater than 0"),this.triggerRelease(e,a+i)}return this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}set(e){const t=c(e,["onsilence","context"]);return this.options=j(this.options,t),this._voices.forEach(s=>s.set(t)),this._dummyVoice.set(t),this}get(){return this._dummyVoice.get()}releaseAll(e){const t=this.toSeconds(e);return this._activeVoices.forEach(({voice:s})=>{s.triggerRelease(t)}),this}dispose(){return super.dispose(),this._dummyVoice.dispose(),this._voices.forEach(e=>e.dispose()),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this}}class _ extends N{constructor(){super(n(_.getDefaults(),arguments,["size"])),this.name="FFT";const e=n(_.getDefaults(),arguments,["size"]);this.normalRange=e.normalRange,this._analyser.type="fft",this.size=e.size}static getDefaults(){return Object.assign(m.getDefaults(),{normalRange:!1,size:1024,smoothing:.8})}getValue(){return this._analyser.getValue().map(t=>this.normalRange?z(t):t)}get size(){return this._analyser.size}set size(e){this._analyser.size=e}get smoothing(){return this._analyser.smoothing}set smoothing(e){this._analyser.smoothing=e}getFrequencyOfIndex(e){return r(0<=e&&e<this.size,`index must be greater than or equal to 0 and less than ${this.size}`),e*this.context.sampleRate/(this.size*2)}}export{D as A,_ as F,p as P};
